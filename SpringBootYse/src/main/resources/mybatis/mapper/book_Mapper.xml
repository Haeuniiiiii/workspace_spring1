<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 인터페이스가 구현체가 되게끔 핸들링 -->
<mapper namespace="kr.or.ddit.mapper.IBookMapper">

<!-- 
	마이바티스
	- https://mybatis.org/mybatis-3/ko/getting-started.html
	
	마이바티스는 무엇인가요?
	- 마이바티스는 개발자가 지정한 SQL, 저장 프로시저 그리고 몇가지 고급 맵핑을 지원하는 퍼시스턴스 프레임워크입니다.
	  마이바티스는 JDBC로 처리하는 상당부분의 코드와 파라미터 설정 및 결과 맵핑을 대신해줍니다.
	  마이바티스는 데이터베이스 레코드에 원시타입과 Map 인터페이스 그리고 자바 POJO를 설정해서 매핑하기 위해 
	  XML과 어노테이션을 사용할 수 있습니다.
	  
	**** POJO란?
	- POJO (Plain Old Java Object)란, 순수한 자바객체를 말합니다.
	  그리고 객체지향적인 원리에 출실하면서, 환경과 기술에 종속되지 않고 필요에 따라 재활용될 수 있는 방식으로
	  설계된 오브젝트. 객체지향 원리를 기반으로 설계된 오브젝트(객체)죠.(getter/setter 를 이용한 VO들)
	  
	namespace 항목은 쿼리가 여러개 일때 이름공간을 분리하는 역할을 합니다.
	쿼리 XML 파일은 보통 여러 개 생성되기 때문에 이를 구별하는 용도로 사용합니다.
 -->
 
 
	<!-- 
		insert, select 등등 태그내, id 항목은 namespace 안에서 쿼리를 구분하는 유일한 식별자 역할을 합니다.
		# 데이터 입력 SQL 쿼리 작성방법 : INSERT INTO 테이블명 (컬럼1, 컬럼2,...) VALUES (값1, 값2..)
		
		parameterType 은 쿼리에 적용할 파라미터 타입 (현재 Map 타입을 사용중)
		'useGeneratedKeys'속성은 자동으로 생성된 Primary Key 값을 자바 객체에서 다시 사용할 때 설정합니다.
		'useGeneratedKeys'와 'keyProperty'는 하나의 쌍으로 작성되는데, 'useGeneratedKeys'가 true 로 설정되면
		myBatis 는 insert 쿼리 실행 후 생성된 pk 를 파라미터 타입으로 설정된 타입의 keyProperty 속성에 값으로 넣어준다.
		
		[useGeneratedKeys] | 자동 증가된 번호값과 같은 값을 가져올 것인지에 대한 여부 설정
		[keyProperty]	   | 여부 true 설정 시, 어떤 필드 값으로 받을 것인지 설정
		
		myBatis 는 쿼리를 실행할 때 파라미터를 치환하는데 #{title}은 파라미터로 입력된 키를 값으로 치환합니다.
		map.get("title") == "제목" 형태가 myBatis 쿼리 XML 에 전달되면 myBatis는 #{title}을 "제목"으로
		자동변환합니다. #{title}, #{category}, #{price} ==> {"제목", "카테고리", 1000 } 이렇게 치환됩니다.
	 -->
	<insert id="insert" parameterType="hashMap" useGeneratedKeys="true">
		
		<!-- 등록하며 만들어진 키값의 값을 취하고 싶을 때 사용 하는게 keyprop -->
		<selectKey keyProperty="book_id" resultType="int" order="BEFORE">
			select seq_book.nextval from dual
		</selectKey>
		
		insert into book (
			book_id, title, category, price
		) values (
			#{book_id}, #{title}, #{category}, #{price}
		)
	
	</insert>
	
	
	<select id="selectBook" parameterType="hashMap" resultType="hashMap">
	
		select
			book_id, title, category, price, 
			to_char(insert_date, 'YYYY-MM-DD hh24:mi:dd') as insert_date
		from book
		where book_id = #{bookId}
		
	</select>
	
	<update id="update" parameterType="hashMap">
		update book
		set 
			title = #{title},
			category = #{category},
			price = #{price}
		where 
			book_id = #{bookId}
	</update>
	
	<delete id="delete" parameterType="hashMap">
	
		delete from book
		where book_id = #{bookId}
		
	</delete>
	
	<!-- 전체목록리스트 -->
	<select id="selectBookList" parameterType="hashMap" resultType="hashMap">
	
		select
			book_id, title, category, price, 
			to_char(insert_date, 'YYYY-MM-DD hh24:mi:dd') as insert_date
		from book
		where 1=1 
		<if test="keyword != null and keyword != ''">
			and 
			(
				title like '%'||#{keyword}||'%' or
				category like '%'||#{keyword}||'%'
			)
		</if>
		order by book_id desc
		
	</select>
	

</mapper>
  
  
